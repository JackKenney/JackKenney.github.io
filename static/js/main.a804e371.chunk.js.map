{"version":3,"sources":["Lists/List.js","Lists/Lists.js","App.js","serviceWorker.js","index.js"],"names":["renderItem","item","key","text","href","link","List","props","className","items","title","list","push","renderItems","Lists","lists","content","renderLists","App","src","alt","links","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8wBAEA,SAASA,EAAWC,GAChB,OACI,wBAAIC,IAAKD,EAAKE,MAAM,uBAAGC,KAAMH,EAAKI,MAAOJ,EAAKE,OAuBvCG,MAXf,SAAcC,GACV,OACI,yBAAKC,UAAU,QACX,4BAAKD,EAAME,MAAMC,OACjB,4BAZZ,SAAqBD,GACjB,IADwB,EACpBE,EAAO,GADa,cAELF,GAFK,IAExB,2BAA0B,CAAC,IAAhBR,EAAe,QACtBU,EAAKC,KAAKZ,EAAWC,KAHD,8BAKxB,OAAOU,EAQME,CAAYN,EAAME,MAAMA,UCF1BK,MARf,SAAeP,GACX,OACI,yBAAKC,UAAU,SAVvB,SAAqBO,GACjB,IADwB,EACpBC,EAAU,GADU,cAELD,GAFK,IAExB,2BAA0B,CAAC,IAAhBJ,EAAe,QACtBK,EAAQJ,KAAK,kBAAC,EAAD,CAAMH,MAAOE,EAAMT,IAAKS,EAAKD,UAHtB,8BAKxB,OAAOM,EAMEC,CAAYV,EAAMQ,S,OCgBhBG,E,uKAvBX,OACE,yBAAKV,UAAU,eACb,yBAAKA,UAAU,QACb,yBAAKW,IAAI,uBAAuBX,UAAU,WAAWY,IAAI,8BAE3D,yBAAKZ,UAAU,SACb,2CACA,0BAAMA,UAAU,WAAhB,iCACA,yBAAKA,UAAU,OACb,4EACgD,uBAAGJ,KAAK,yBAAR,iBADhD,eAEY,uBAAGA,KAAK,6BAAR,aAFZ,kFAG8B,uBAAGA,KAAK,+BAAR,aAH9B,0DAOF,kBAAC,EAAD,CAAOW,MAAOM,U,GAlBNC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a804e371.chunk.js","sourcesContent":["import React from 'react';\n\nfunction renderItem(item) {\n    return (\n        <li key={item.text}><a href={item.link}>{item.text}</a></li>\n    )\n};\n\nfunction renderItems(items) {\n    let list = []\n    for (const item of items) {\n        list.push(renderItem(item))\n    }\n    return list\n};\n\nfunction List(props) {\n    return (\n        <div className=\"list\">\n            <h4>{props.items.title}</h4>\n            <ul>\n                {renderItems(props.items.items)}\n            </ul>\n        </div>\n    );\n}\n\nexport default List;\n","import React from 'react';\nimport List from './List';\n\nfunction renderLists(lists) {\n    let content = []\n    for (const list of lists) {\n        content.push(<List items={list} key={list.title}/>)\n    }\n    return content;\n};\n\nfunction Lists(props) {\n    return (\n        <div className=\"lists\">\n            {renderLists(props.lists)}\n        </div>\n    );\n}\n\nexport default Lists;\n","import React from 'react';\nimport './App.css';\nimport Lists from './Lists/Lists';\nimport links from './Lists/links.json';\n\nclass App extends React.Component  {\n  render() {\n    return (\n      <div className=\"App content\">\n        <div className='left'>\n          <img src=\"./images/profile.jpg\" className=\"headshot\" alt=\"Headshot of Jack Kenney.\"/>\n        </div>\n        <div className='right'>\n          <h1>Jack Kenney</h1>\n          <span className=\"tagline\">Scientist. Developer. Artist.</span>\n          <div className=\"bio\">\n            <p>\n              Studying machine learning and data science at <a href=\"https://cs.umass.edu/\">UMass Amherst</a>.\n              Worked at <a href=\"https://www.mathworks.com\">MathWorks</a> on Docker-based cloud services written in Golang. \n              Conducted research with the <a href=\"https://binds.cs.umass.edu/\">BINDS lab</a>.\n              Hobbies include ceramic art and instrumental music.\n            </p>  \n          </div>\n          <Lists lists={links}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}